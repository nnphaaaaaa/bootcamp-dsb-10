# -*- coding: utf-8 -*-
"""spotify_youtube_dataset.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QpDvo0Hkmvou1Wf9MGZWitmwHkj5lHpp

# Project : spotify_youtube_dataset  with python

## Author : Naphaphon Phayakkapes

## Language : Python

### Date : 27 Aug 2025
"""

#import and required library

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# import csv file
df =  pd.read_csv('Spotify_Youtube_Dataset.csv')
df.head()

# get some basic information about dataset
df.info()

#  remove the columns  from the dataset
df.drop(columns= ['Unnamed: 0' , 'Url_spotify', 'Url_youtube'], inplace = True )
df.head(10)

#check missing value counts in each column  of the dataset
df.isnull().sum()

# fill  the missing values with 0 in likes and comments columns

df['Likes'] = df['Likes'].fillna(0)
df['Comments'] = df['Comments'].fillna(0)

#  to check  the  count of missing values in each column
df.isnull().sum()

# drop the rowa that contrains all or any missing values
df.dropna(inplace = True)

#  to check  the  count of missing values in each column
df.isnull().sum()

#double check
df.info()

"""## Using this dataset, we answered multiple questions with Python

####  Q.1) Top 10 Artists - with the Highest Views on YouTube?
"""

# groups the DataFrame
art_view = df.groupby('Artist')['Views'].sum()
    # sorts it in descending order from highest to lowest views
high_art_view = art_view.sort_values(ascending = False).head(10)

"""#### Q.2) Top 10 Tracks - with the Highest Streams on Spotify?"""

# create a new df with 2  columns - track, stream
tracks_stream =  df[['Track', 'Stream']]
    # sort the df with Stream column
high_track_stream = tracks_stream.sort_values(by  = ['Stream'] ,ascending = False).head(10)

"""##### Question For You
Q.2A) 5 Tracks - with the Lowest Streams on Spotify?
"""

tracks =  df[['Track', 'Stream']]
low_tracks = tracks.sort_values(by  = ['Stream'] ,ascending = True) .head(5)

"""#### Q.3) What are the most common Album Types on Spotify? How many tracks belong to each album type?"""

# unique value in a column
df.Album_type.unique()
    # shows all unique values with their counts in the column
a_type = df['Album_type'].value_counts()

type(a_type)

#  draw a pie  chart
plt.pie(
    a_type,
    labels = a_type.index,
    autopct  =  " '%1.1f%%' ",
    startangle =  60,
    #colors = 'cyg',
    colors = ['skyblue', 'salmon', 'lightgreen'],
    shadow = 'True',
    explode =  (0.05, 0.05, 0.05)
    ) ,
plt.title('Album Type')
plt.show()

"""Pie Chart -
plt.pie(slices, labels= activities, colors = ‘bryg’, startangle= , shadow=True, explode=(0,0,0.1,0.2), autopct= ‘%1.1f%%’, pctdistance=0.75 ) .

Slices = [12,15,20,10] ,

activities = [‘eating’, ‘ sleeping’ , ‘working’, ‘playing’].

Explode - To cut the slices out.

Autopct - To show the % on the chart using string format.

pctdistance - Distance of % from center

Compare parts of data to the whole. It shows the size of items(wedges) in one data series proportional to the sum of the items

#### Q.4) How do the Average Views, Likes, and Comments are compared between different Album Types?
"""

#concise summary of our data
df1 = df.groupby('Album_type')[['Views', 'Likes', 'Comments']].mean()
df1

type(df1)

# convert the index of the Series into form a Dataframe
df1 = df1.reset_index()
df1

# 'Melt' or 'unpivot' the DataFrame to make it long format.
# This makes the data easier to plot for comparisons.
df1_melted = pd.melt(
                    df1,
                    id_vars = 'Album_type' ,
                    var_name  ='Attribute',
                    value_name = 'Total'
                    )

df1_melted

# Draw the bar chart
plt.figure(figsize = (9,4))

sns.barplot(
    x = 'Album_type',
    y = 'Total',
    hue = 'Attribute',
    data = df1_melted
    )

"""#### Q.5) Top 5 YouTube Channels - based on the Views?"""

c_views = df.groupby('Channel')['Views']\
            .sum().sort_values(ascending = False)\
            .head()

c_views

c_views = c_views.reset_index()

c_views.head()

# check type
type(c_views)

# sns.set_style("whitegrid")

sns.barplot(
    x = "Views",
    y = "Channel",
    data = c_views ,
    color = 'cyan')
plt.title('Top 5 Channels by views')
plt.xlabel('Views')
plt.ylabel('Channel')
plt.show()

"""#### Q.6) The Top Most Track - based on Views?"""

df.sort_values(by = 'Views', ascending = False ).head(1)

"""####  Q.7) Which Top 7 Tracks have the highest Like-to-View ratio on YouTube?"""

track_lv = df[['Track', 'Likes', 'Views']]

track_lv

track_lv.insert(3, 'LVRatio', df['Likes']/df['Views'])

track_lv

track_lv.sort_values(by = 'LVRatio', ascending = False).head(7)

"""#### Q.7.A) Which Top 3 Tracks have the lowest Like-to-View ratio on YouTube?"""

track_lv.sort_values(by = 'LVRatio', ascending = True).head(3)

"""#### Q.8) Top Albums having the Tracks with Maximum Danceability ?"""

# Calculate the sum danceability for each album
sum_danceability_by_album = df.groupby('Album')['Danceability'].sum()

sum_danceability_by_album

# Sort the results to find the top albums with the highest average danceability
top_danceable_albums = sum_danceability_by_album.sort_values(ascending=False)

# Display the result
print(top_danceable_albums)

# Example of how to filter for a specific album if needed
greatest_hits_tracks = df[df['Album'] == 'Greatest Hits']
print(greatest_hits_tracks)

"""#### Q.9) What is the Correlation between Views, Likes, Comments, and Stream?"""

#create a new dataframe with 4 columns
df_vlcs = df[['Views', 'Likes', 'Comments', 'Stream']]

df_vlcs

# correlation matrix for the required columns
df_vlcs.corr()

# draw a heatmap for correlation matrix
sns.heatmap(df_vlcs.corr(), annot = True)

